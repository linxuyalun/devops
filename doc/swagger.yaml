---
swagger: "2.0"
info:
  description: A simple API to learn how to write OpenAPI Specification
  version: 1.0.0
  title: Sample API
host: virtserver.swaggerhub.com
basePath: /linxuyalun/demo/1.0.0
schemes:
- https
- http
security:
- UserSecurity: []
paths:
  /persons:
    get:
      tags:
      - Persons
      summary: Gets some persons
      description: Returns a list containing all persons
      parameters:
      - name: pageSize
        in: query
        description: Number of persons returned
        required: false
        type: integer
        default: 20
        maximum: 100
        exclusiveMaximum: false
        minimum: 0
        exclusiveMinimum: true
        multipleOf: 10
        format: int32
      - name: pageNumber
        in: query
        description: Page number
        required: false
        type: integer
      - name: includeNonVerifiedUsers
        in: query
        required: false
        type: boolean
        default: false
        allowEmptyValue: true
      - name: sort
        in: query
        required: false
        type: array
        items:
          type: string
          pattern: '[-+](username|lastTimeOnline|firstName|lastName)'
        collectionFormat: pipes
        default: '[-lastTimeOnline, +username]'
        maxItems: 3
        minItems: 1
        uniqueItems: true
      - name: User-Agent
        in: header
        required: true
        type: string
      responses:
        200:
          description: A list of Person
          schema:
            $ref: '#/definitions/Persons'
        500:
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Creats a person
      description: Adds a new person to the persons list
      parameters:
      - in: body
        name: person
        description: The person to create
        required: false
        schema:
          $ref: '#/definitions/Person'
      responses:
        204:
          description: Persons successfully created
          headers:
            X-Rate-Limit-Remaining:
              type: integer
            X-Rate-Limit-Reset:
              type: string
              format: date-time
        400:
          description: Persons couldn't have been created
        500:
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/Error'
      security:
      - AdminSecurity: []
  /persons/{username}:
    get:
      summary: Gets a person
      description: Returns a single person for its username
      parameters:
      - name: username
        in: path
        description: The person's username
        required: true
        type: string
      responses:
        200:
          description: A Person
          schema:
            $ref: '#/definitions/Person'
        404:
          description: The Person does not exists.
        500:
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Deletes a person
      description: Delete a single person identified via its username
      parameters:
      - name: username
        in: path
        description: The person's username
        required: true
        type: string
      responses:
        204:
          description: Delete a single perseon
        404:
          description: Person does not exist.
        500:
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: A unexpected response
  /persons/{username}/friends:
    get:
      summary: Gets a person's friends
      description: Returns a list containing all persons. The list supports paging.
      parameters:
      - name: username
        in: path
        description: The person's username
        required: true
        type: string
      - name: pageSize
        in: query
        description: Number of persons returned
        required: false
        type: integer
        default: 20
        maximum: 100
        exclusiveMaximum: false
        minimum: 0
        exclusiveMinimum: true
        multipleOf: 10
        format: int32
      - name: pageNumber
        in: query
        description: Page number
        required: false
        type: integer
      responses:
        200:
          description: A person's friends list
          schema:
            $ref: '#/definitions/Persons'
        404:
          description: Person does not exist.
        500:
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/Error'
  /images:
    post:
      summary: Uploads an image
      consumes:
      - multipart/form-data
      parameters:
      - name: User-Agent
        in: header
        required: true
        type: string
      - name: image
        in: formData
        required: false
        type: file
      responses:
        200:
          description: OK
          schema:
            properties:
              imageId:
                type: string
      security:
      - MediaSecurity: []
securityDefinitions:
  UserSecurity:
    type: apiKey
    name: SIMPLE-API-KEY
    in: header
  AdminSecurity:
    type: apiKey
    name: ADMIN-API-KEY
    in: header
  MediaSecurity:
    type: apiKey
    name: MEDIA-API-KEY
    in: header
  OauthSecrurity:
    type: oauth2
    authorizationUrl: https://oauth.simple.api/authorization
    tokenUrl: https://oauth.simple.api/token
    flow: accessCode
    scopes:
      admin: Admin scope
      user: User scope
      media: Media scope
definitions:
  Person:
    required:
    - username
    properties:
      firstName:
        type: string
      lastName:
        type: string
      username:
        type: string
        minLength: 8
        maxLength: 64
        pattern: '[a-z0-9]{8,64}'
      dateOfBirth:
        type: string
        format: date
      lastTimeOnline:
        type: string
        format: dateTime
        readOnly: true
  Persons:
    properties:
      items:
        type: array
        uniqueItems: true
        items:
          $ref: '#/definitions/Person'
        maxItems: 100
        minItems: 10
  Error:
    properties:
      code:
        type: string
        enum:
        - DBERR
        - NTERR
        - UNERR
      message:
        type: string
  Paging:
    properties:
      totalItems:
        type: integer
      totalPages:
        type: integer
      pageSize:
        type: integer
      currentPage:
        type: integer
  PagedPersons:
    allOf:
    - $ref: '#/definitions/Persons'
    - $ref: '#/definitions/Paging'
parameters:
  username:
    name: username
    in: path
    description: The person's username
    required: true
    type: string
  pageSize:
    name: pageSize
    in: query
    description: Number of persons returned
    required: false
    type: integer
    default: 20
    maximum: 100
    exclusiveMaximum: false
    minimum: 0
    exclusiveMinimum: true
    multipleOf: 10
    format: int32
  pageNumber:
    name: pageNumber
    in: query
    description: Page number
    required: false
    type: integer
  includeNonVerifiedUsers:
    name: includeNonVerifiedUsers
    in: query
    required: false
    type: boolean
    default: false
    allowEmptyValue: true
  sortPersons:
    name: sort
    in: query
    required: false
    type: array
    items:
      type: string
      pattern: '[-+](username|lastTimeOnline|firstName|lastName)'
    collectionFormat: pipes
    default: '[-lastTimeOnline, +username]'
    maxItems: 3
    minItems: 1
    uniqueItems: true
  userAgent:
    name: User-Agent
    in: header
    required: true
    type: string
responses:
  Standard500ErrorResponse:
    description: An unexpected error occured.
    schema:
      $ref: '#/definitions/Error'
  PersonDoesNotExistResponse:
    description: Person does not exist.
